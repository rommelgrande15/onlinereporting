<?php
namespace App\Http\Controllers;
use App\Template;
use Dompdf\Exception;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;
use App\Client;
use App\ClientCode;
use App\Report;
use App\Factory;
use App\ReportUpload;
use App\ReportUploadFile;
use App\User;
use App\Inspection;
use App\UserInfo;
use DB;
use Session;
use Mail;
use App\Role;

class ReportsReviewerController extends Controller
{
	/*public function handle($request, Closure $next){
		$response = $next($request);

		$response->headers->set('Access-Control-Allow-Origin' , '*');
		$response->headers->set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, PUT, DELETE');
		$response->headers->set('Access-Control-Allow-Headers', 'Content-Type, Accept, Authorization, X-Requested-With, Application');
		
		return $response;
	}*/
	
	
	private $reports_path;
	
	public function __construct() {
		$this->reports_path = public_path('reviewer-reports');
	}
	
	public function getDashboardPanelReport($id){
		if(!Auth::id()){
			return redirect()->route('login');
		}
		
		$role = User::where('id',Auth::id())->first();
		
		if($role->category == 'reports_review'){
			$user_info = UserInfo::where('user_id',Auth::id())->first();
        	$user = User::where('id',Auth::id())->first();
			//$user_code = $user->client_code;
        	//$clients = Client::where('client_code',$user_code)->get();
        	//$inspections = Inspection::where('inspection_status','Released')->get();
			
			$inspections = DB::table('inspections')
				->join('clients', 'inspections.client_id', '=', 'clients.client_code')
				->select('inspections.id','inspections.client_id','inspections.reference_number','clients.client_name','inspections.created_at')
				->where('inspections.inspection_status','Released')
				->latest()
				->get();
			
			return view('pages.reportsReviewer.index',compact('inspections','user_info','user'));   
		} else {
			return redirect()->route('login');
		}
		
	}
	
	public function getClientReport($id){
        $inspection_new = DB::table('inspections')
                        ->where('id',$id)                    
                        ->first(); 

        $clients = Client::where('client_code',$inspection_new->client_id)->first();
		
			//->get(['Company_Email']);
			//->get(['id','client_code','Company_Email','client_name']);
        return response()->json([
            'clients' => $clients
        ]);
    }
	
	 public function store(Request $request) {
		 $req = $request['request'];
		 $id = $request['id'];
			
		 if(!empty($request->file('file'))){
			 $reports = $request->file('file');
			 $reports_size = $reports->getSize();
		 }
		 
		 $inspection_id = $request['inspection_id'];
		 $company_email = $request['company_email'];
		 
		 $recipient_email = $request['recipient_email'];
		 $recipient_mail = explode(';', $recipient_email);
		 
		 if(empty($request['cc_email'])){
			 $cc_email = $cc_mail = "";
		 } else {
			 $cc_email = $request['cc_email'];
			 $cc_mail = explode(';', $cc_email);
		 }
		 
		 
		/* $inspections = DB::table('inspections')
            ->join('clients', 'inspections.client_id', '=', 'clients.client_code')
            ->join('factories', 'inspections.factory', '=', 'factories.id')
            ->select('inspections.inspection_date', 'clients.client_name', 'factories.factory_name')
			->where('inspections.client_id',$client_id)
            ->get();*/
		 
		 $inspections = Inspection::where('id',$inspection_id)->first();
		 $client_id = $inspections->client_id;
			 
		 $factory_id = $inspections->factory;
		 $factories = Factory::where('id',$factory_id)->first();
		 $fact_name = $factories->factory_name;
		 
		 
		 $clients = Client::where('client_code',$client_id)->first();
		 $reviewer = UserInfo::where('user_id',Auth::id())->first();
		 $reviewer_name = $reviewer->name;
		 $reviewer_email = $reviewer->email_address;
		 
		 
		 $client_name = $clients->client_name;
		 $inspection_date = $inspections->inspection_date;
		 
		 
		 if($req == 2){
			 //$filename = $request->id;
			 $uploaded_report = ReportUploadFile::where('name', $id)->first();
 
			 if (empty($uploaded_report)) {
				 return response()->json(['message' => 'Sorry file does not exist'], 400);
			 }
 
			 $file_path = $this->reports_path . '/' . $uploaded_report->name;
 
			 if (file_exists($file_path)) {
				 unlink($file_path);
			 }
 
			 if (!empty($uploaded_report)) {
				 $uploaded_report->delete();
			 }
 
			 return response()->json(['message' => 'File successfully delete'], 200);
		 }
		 
       /* if (!is_array($reports)) {
            $reports = [$reports];
        }*/
        /*if (!is_dir($this->reports_path . $ref_no)) {
            mkdir($this->reports_path . $ref_no, 0777);
        }*/
 
        //for ($i = 0; $i < count($reports); $i++) {
            //$report = $reports[$i];
		 $save_name = $reports->getClientOriginalName();
		 
		 //Change Name of the file if there's a # sign
		 $save_name = str_replace('#','No.',$save_name);
		 $reports->move($this->reports_path . '/' . $inspection_id . '/', $save_name);
		 
		 $report_upload = new ReportUpload();
		 $report_upload->inspection_id = $inspection_id;
		 $report_upload->user_id = Auth::id();
		 $report_upload->client_code = $client_id;
		 $report_upload->reference_no = $inspections->reference_number;
		 $report_upload->client_email = $company_email;
		 $report_upload->client_cc_email = $recipient_email;
		 $report_upload->client_bcc_email = $cc_email;
		 $report_upload->report_file = $save_name;
		 $report_upload->report_file_size = $reports_size;
            if($report_upload->save()){
				$data = ['company_email' => $company_email,
					 'recipient_mail' => $recipient_mail,
					 'cc_mail' => $cc_mail,
					 'report_upload_id' => $report_upload->id,
					 'reference_no' => $inspections->reference_number,
					 'inspection_id' => $inspection_id,
					 'save_name' => $save_name,
					 'report_size' => $reports_size,
					 'factory_name' => $fact_name,
					 'client_name' => $client_name,
					 'inspection_date' => date('F d, Y',strtotime($inspection_date)),
					 'reviewer_name' => $reviewer_name,
					 'reviewer_email' => $reviewer_email,
					 'report_file' => $this->reports_path . '/' . $inspection_id . '/'. $save_name,
				];
				Mail::send('email.send_report',$data, function($message) use ($data){
					$message->to($data['company_email'],$data['client_name']);
					foreach($data['recipient_mail'] as $mail){
						$message->to($mail);
					}
					if(!empty($data['cc_mail'])){
						foreach($data['cc_mail'] as $c_mail){
							$message->cc($c_mail);
						}
					}
					$message->cc('rommel@t-i-c.asia','Rommel Lacap');
					$message->cc('gregor@t-i-c.asia','Gregor Voege');
					$message->bcc('emil@t-i-c.asia','Emil Tamayo');
					
					$message->replyTo($data['reviewer_email'], $data['reviewer_name']);
					
					
					
					//$message->to($data['recipient_email']);
					//$message->cc($data['cc_email']);          
					$message->subject('Inspection Report - (' . $data['reference_no'] . ')');
					//$report_file=$this->reports_path . '/' . $data['save_name'];
					if($data['report_size'] <= 36700160){
						$message->attach($data['report_file']);
					}
				});            
				if (count(Mail::failures()) > 0) {
					return response()->json([
						'message' => 'Email Error',
					],500);
				}else{
					return response()->json([
						'message' => 'Report Saved',
					],200);
				}
			} else {
				return response()->json([
					'message' => 'Save Error',
				],500);
			}
        //}
        
    }
	
	public function download_report($reference_no) {
		$report_upload = ReportUpload::where('reference_no',$reference_no)->first();
		
		$inspection_id = $report_upload->inspection_id;
		$ref_no = $report_upload->reference_no;
		$filename = $report_upload->report_file;
		$file_ext = \File::extension($filename);
		
		$file_path = public_path('reviewer-reports/' . $inspection_id . '/' .$filename);
		
    	return response()->download($file_path);
	}
	
	public function download_report_file($inspection_id, $filename) {
		$report_upload = ReportUpload::where('inspection_id',$inspection_id)->where('report_file',$filename) ->first();
		
		$inspection_id = $report_upload->inspection_id;
		$filename = $report_upload->report_file;
		$file_ext = \File::extension($filename);
		 
		$file_path = $this->reports_path . '/' . $inspection_id . '/' .$filename;
		
    	return response()->download($file_path);
	}
	
	//View Uploaded Reports
	public function view_uploaded_report(Request $request) {
		if(!empty($request)){
			$id = $request['id'];
			$report_uploads = DB::table('report_uploads')
				->join('user_infos', 'report_uploads.user_id', '=', 'user_infos.user_id')
				->select('report_uploads.*', 'user_infos.name')
				->where('report_uploads.inspection_id',$id)
				//->where('report_uploads.user_id',Auth::id())
				->latest()
				->get();
			return response()->json($report_uploads);
		} else {
			return 'asa';
		}
	}
	
	public function ajaxDatatable(){
       /* $inspection_new = DB::table('inspections')
                        ->where('id',$id)                    
                        ->first(); */
		$inspections = Inspection::where('inspection_status','Released')->get();
			//->get(['Company_Email']);
			//->get(['id','client_code','Company_Email','client_name']);
        return response()->json([
            'inspections' => $inspections
        ]);
    }
}
